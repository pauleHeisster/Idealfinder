classdef Dialog < handle
    %DIALOG Summary of this class goes here
    %   Detailed explanation goes here
    
    properties
        hFigure
        nBottomRow
        hBottomRowBtnGroup
        
        hTabGr
        hTabDim
        sDim
        hTabEngine
        sEngine
        hTabForces
        sForces
    end
    
    methods
        function [this] = Dialog(oVehicle)
            if nargin == 0 || ~isa(oVehicle, 'Carisma.Vehicle')
                oVehicle = Carisma.Vehicle(); 
            end
            this.hFigure = figure( ...
                  'Name', 'Wheeler GUI' ...
                , 'NumberTitle', 'off' ...
                , 'MenuBar', 'none' ...
                , 'ToolBar', 'none' ...
                , 'SizeChangedFcn', @this.saveSize ...
                , 'Position', [100, 200, 700, 400] ...
                );
            this.nBottomRow = .075;
            this.hBottomRowBtnGroup = uibuttongroup( ...
                  'Parent', this.hFigure ...
                , 'Visible', 'on' ...
                , 'Position', [0 0 1 this.nBottomRow] ...
                );
            
            aBtns = {
                'Load Parameter', @(~,~) this.updateWheelerData(oVehicle), 'off'
                'Apply Parameter', @(~,~) this.updateWheelerData(oVehicle), 'on'
                'Save Parameter', @(~,~) this.updateWheelerData(oVehicle), 'off'
                };
            nBtns = size(aBtns, 1);
            i = 0;
            for aCurBtn = aBtns'
                i = i+1;
                uicontrol( ...
                      'Parent', this.hBottomRowBtnGroup ...
                    , 'String', aCurBtn{1} ...
                    , 'Enable', aCurBtn{3} ...
                    , 'Callback', aCurBtn{2} ...
                    , 'Units', 'normal' ...
                    , 'Position', [(i-1)/nBtns 0 1/nBtns 1] ...
                    );
            end
            
            this.hTabGr = uitabgroup( ...
                  this.hFigure ...
                , 'Units', 'normal' ...
                , 'SelectionChangedFcn', @(~,~) this.updateWheelerGUI(oVehicle) ...
                , 'Position', [0 this.nBottomRow 1 1-this.nBottomRow] ...
                );
            this.hTabDim = uitab(this.hTabGr, 'Title', 'Dimensions', 'UserData', [600,400]);
            this.hTabEngine = uitab(this.hTabGr, 'Title', 'Engine & Gearbox', 'UserData', [600,500]);
            this.hTabForces = uitab(this.hTabGr, 'Title', 'Forces', 'UserData', [370,450]);
            
            %% TabDim
            h_bg_modell = .075;
            b_ax = [2 1];
            b_ax = b_ax/sum(b_ax);
            h_sl = .05;
            this.sDim.bg_modell = uibuttongroup( ...
                  'Parent', this.hTabDim ...
                , 'Position', [0 1-h_bg_modell 1 h_bg_modell] ...
                );
            rbtn = {
                'Punktmasse', 'on'
                '1-Spur', 'off'
                '2-Spur', 'off'
                };
            n_rbtn = size(rbtn,1);
            for aCurBtn = 1:n_rbtn
                uicontrol( ...
                      'Parent',this.sDim.bg_modell ...
                    , 'Style', 'radiobutton' ...
                    , 'Enable', rbtn{aCurBtn,2} ...
                    , 'String', rbtn{aCurBtn,1} ...
                    , 'Units', 'normal' ...
                    , 'Position', [(aCurBtn-1)/n_rbtn 0 1/n_rbtn 1] ...
                    );
            end
            this.sDim.side_ax = axes( ...
                  'Parent', this.hTabDim ...
                , 'color', 'none' ...
                , 'Units', 'normal' ...
                , 'XTickLabel', '' ...
                , 'YTickLabel', '' ...
                , 'ZTickLabel', '' ...
                , 'Box', 'on' ...
                , 'Tag', 'Side' ...
                , 'Position', [h_sl h_sl b_ax(1) 1-h_bg_modell-h_sl] ...
                );
            axis(this.sDim.side_ax,'equal');
            %grid(this.sDim.side_ax, 'on');
            
            pos = this.sDim.side_ax.Position;
            this.sForces.b_slider = uicontrol( ...
                  'Parent', this.hTabDim ...
                , 'Style', 'slider' ...
                , 'TooltipString', 'Lage des Schwerpunkts [links/rechts]' ...
                , 'Units', 'normal' ...
                , 'Callback', @(~,~) this.updateWheelerGUI(oVehicle) ...
                , 'Position', [0 pos(2) h_sl pos(4)] ...
                , 'Tag', 'b_slider' ...
                , 'Value', oVehicle.dims.b_lr ...
                );
            pos = this.sDim.side_ax.Position;
            this.sForces.l_slider = uicontrol( ...
                  'Parent', this.hTabDim ...
                , 'Style', 'slider' ...
                , 'TooltipString', 'Lage des Schwerpunkts [vorn/hinten]' ...
                , 'Units', 'normal' ...
                , 'Callback', @(~,~) this.updateWheelerGUI(oVehicle) ...
                , 'Position', [pos(1) pos(2)-h_sl pos(3) h_sl] ...
                , 'Tag', 'l_slider' ...
                , 'Value', oVehicle.dims.l_fr ...
                );
            this.sForces.h_slider = uicontrol( ...
                  'Parent', this.hTabDim ...
                , 'Style','slider' ...
                , 'TooltipString', 'Hoehe des Schwerpunkts' ...
                , 'Units', 'normal' ...
                , 'Callback', @(~,~) this.updateWheelerGUI(oVehicle) ...
                , 'Position', [pos(1)+pos(3) pos(2) h_sl pos(4)] ...
                , 'Tag', 'h_slider' ...
                , 'Value', oVehicle.dims.h_bt ...
                );
            
            felder = {
                'l_edit', 'Radstand (L) [m]', oVehicle.dims.l;
                'b_edit', 'Spurweite (B) [m]', oVehicle.dims.b;
                'h_edit', 'Hoehe (H) [m]', oVehicle.dims.h;
                'R_edit', 'Radhalbmesser (R) [m]', oVehicle.dims.R;
                'm_edit', 'Fahrzeugmasse (m) [kg]', oVehicle.oInertia.nMass
                };
            n_felder = size(felder, 1);
            h = (1-h_bg_modell-h_sl)/n_felder;
            x0 = pos(1)+pos(3)+h_sl;
            h0 = 1-h_bg_modell-h;
            for aCurBtn = 1:n_felder
                uicontrol( ...
                      'Parent',this.hTabDim ...
                    , 'Style', 'edit' ...
                    , 'Tag', felder{aCurBtn, 1} ...
                    , 'TooltipString', felder{aCurBtn, 2} ...
                    , 'Callback', @(~,~) this.updateWheelerGUI(oVehicle) ...
                    , 'Units', 'normal' ...
                    , 'String', num2str(felder{aCurBtn, 3}) ...
                    , 'Position', [x0 h0-(aCurBtn-1)*h 1-x0 h] ...
                    );
            end
            
            %% TabEngine
            engine_contextM = uicontextmenu;
            uimenu(engine_contextM ...
                , 'Label', 'Load Motorkennfeld' ...
                , 'Callback', @(~,~) this.updateWheelerGUI(oVehicle) ...
                );
            this.sEngine.performance_ax = axes( ...
                  'Parent', this.hTabEngine ...
                , 'Units', 'normal' ...
                , 'XTickLabel', '' ...
                , 'YTickLabel', '' ...
                ..., 'Color', 'none' ...
                ..., 'YAxisLocation', 'Right' ...
                , 'Tag', 'Performance' ...
                , 'Position', [0 .5 .5 .5] ...
                );
            this.sEngine.engine_ax = axes( ...
                  'Parent', this.hTabEngine ...
                , 'Units', 'normal' ...
                , 'XTickLabel', '' ...
                , 'YTickLabel', '' ...
                , 'YAxisLocation', 'Right' ...
                , 'Color', 'none' ...
                , 'UIContextMenu', engine_contextM ...
                , 'Tag', 'Torque' ...
                , 'Position', [0 .5 .5 .5] ...
                );
            gears_contextM = uicontextmenu;
            uimenu(gears_contextM ...
                , 'Label', 'Add Gear' ...
                , 'Callback', @(~,~) this.UpdateGearsTable(oVehicle, '+') ...
                );
            uimenu(gears_contextM ...
                , 'Label', 'Delete Gear' ...
                , 'Callback', @(~,~) this.UpdateGearsTable(oVehicle, '-') ...
                );
            this.sEngine.gearbox_ax = axes( ...
                  'Parent', this.hTabEngine ...
                , 'Units', 'normal' ...
                , 'XTickLabel', '' ...
                , 'YTickLabel', '' ...
                ..., 'Color', 'none' ...
                , 'XAxisLocation', 'top' ...
                , 'UIContextMenu', gears_contextM ...
                , 'Tag', 'Gears' ...
                , 'Position', [.5 0 .5 .5] ...
                );
            this.sEngine.force_ax = axes( ...
                  'Parent', this.hTabEngine ...
                , 'Units', 'normal' ...
                ..., 'XTickLabel', '' ...
                , 'YTickLabel', '' ...
                ..., 'Color', 'none' ...
                , 'Tag', 'Forces' ...
                , 'Position', [.5 .5 .5 .5] ...
                );
            grid(this.sEngine.gearbox_ax, 'on');
            grid(this.sEngine.engine_ax, 'on');
            grid(this.sEngine.force_ax, 'on');
            
            this.sEngine.n_min_edit = uicontrol( ...
                  'Parent', this.hTabEngine ...
                , 'Style', 'edit' ...
                , 'Callback', @(~,~)this.updateWheelerGUI(oVehicle) ...
                , 'Tag', 'nmin' ...
                , 'Units', 'normal' ...
                , 'Position', [0 .4 .2 .1] ...
                , 'String', num2str(oVehicle.oEngine.nMin) ...
                );
            this.sEngine.n_max_edit = uicontrol( ...
                  'Parent', this.hTabEngine ...
                , 'Style', 'edit' ...
                , 'Callback', @(~,~) this.updateWheelerGUI(oVehicle) ...
                , 'Tag', 'nmax' ...
                , 'Units', 'normal ' ...
                , 'Position', [.5-.2 .4 .2 .1] ...
                , 'String', num2str(oVehicle.oEngine.nMax) ...
                );
            columnname = {'Ratio', 'Vmax [m/s]'};
            rowname = {'Diff', '1.', '2.', '3.', '4.', '5.'};
            columnformat = {'numeric'};
            editable = [true, false];
            data = cell(length(rowname),2);
            data(:,1) = num2cell(oVehicle.oGearbox.ratios);
            
            this.sEngine.gear_ratio_tbl = uitable( ...
                  'Parent', this.hTabEngine ...
                , 'Units', 'normal' ...
                , 'Position', [0 0 .5 .4] ...
                , 'ColumnName', columnname ...
                , 'RowName', rowname ...
                , 'ColumnFormat', columnformat ...
                , 'ColumnEditable', editable ...
                , 'CellEditCallback', @(~,~) this.updateWheelerGUI(oVehicle) ...
                , 'CellSelectionCallback', @(~,eventdata) this.selectedGear(eventdata, [this.sEngine.gearbox_ax, this.sEngine.force_ax]) ...
                , 'Data', data ...
                );
            
            %% TabForces
            x = .05;
            h_sl = .8;
            this.sForces.kamm_ax = axes( ...
                  'Parent', this.hTabForces ...
                , 'Units', 'normal' ...
                ..., 'XTickLabel', '' ...
                ..., 'YTickLabel', '' ...
                , 'Box', 'on' ...
                , 'Tag', 'Kamm' ...
                , 'XAxisLocation', 'top' ...
                ..., 'DataAspectRatio', [1 1 1] ...
                , 'Position', [x 1-h_sl-x 1-2*x h_sl] ...
                );
            %axis(this.sForces.kamm_ax, 'equal');
            grid(this.sForces.kamm_ax, 'on');
            
            pos = this.sForces.kamm_ax.Position;
            this.sForces.l_slider = uicontrol( ...
                  'Parent', this.hTabForces ...
                , 'Style', 'slider' ...
                , 'Units', 'normal' ...
                , 'Callback', @(~,~) this.updateWheelerGUI(oVehicle) ...
                , 'Position', [pos(1) pos(2)-x pos(3) x] ...
                , 'Tag', 'l_slider' ...
                , 'Value', oVehicle.a.l_faktor ...
                );
            this.sForces.q_slider = uicontrol( ...
                  'Parent', this.hTabForces ...
                , 'Style', 'slider' ...
                , 'Units', 'normal' ...
                , 'Callback',@(~,~) this.updateWheelerGUI(oVehicle) ...
                , 'Position', [pos(3)+x pos(2) x pos(4)] ...
                , 'Tag', 'q_slider' ...
                , 'Value', oVehicle.a.q_faktor ...
                );
            felder = {
                ... 'cr_edit', 'Rollwiderstandsbeiwert (c_R) [-]', oVehicle.f.c_R
                ... 'cw_edit', 'Luftwiderstandsbeiwert (c_W) [-]', oVehicle.f.c_W
                'vmax_edit', 'maximale Geschwindigkeit (v_max) [m/s]', oVehicle.nVmax
                };
            n_felder = size(felder,1);
            x = 1/n_felder;
            pos = this.sForces.l_slider.Position;
            h = pos(2);
            h0 = pos(2)-h;
            x0 = 0;
            i = 0;
            for aCurBtn = felder'
                uicontrol( ...
                      'Parent', this.hTabForces ...
                    , 'Style', 'edit' ...
                    , 'Tag', aCurBtn{1} ...
                    , 'TooltipString', aCurBtn{2} ...
                    , 'Callback', @(~,~) this.updateWheelerGUI(oVehicle) ...
                    , 'Units', 'normal' ...
                    , 'String', num2str(aCurBtn{3}) ...
                    , 'Position', [x0+i*x h0 x h] ...
                    );
                i = i+1;
            end
            
            this.updateWheelerGUI(oVehicle);
        end
        
        function UpdateGearsTable(this, oVehicle, strType)
            hGearTbl = this.sEngine.gear_ratio_tbl;
            switch strType
                case '+'
                    hGearTbl.RowName(end+1,1) = {[num2str(size(hGearTbl.Data, 1)) '.']};
                    hGearTbl.Data(end+1,:) = hGearTbl.Data(end, :);
                case '-'
                    if size(hGearTbl.Data,1) > 2
                        hGearTbl.Data(end,:) = [];
                        hGearTbl.RowName(end) = [];
                    end
            end
            this.updateWheelerGUI(oVehicle);
        end
                
        function updateWheelerGUI(this, oVehicle)
            hActiveTab = this.hTabGr.SelectedTab;
            switch hActiveTab.Title
                case 'Dimensions'
                    aFigSiz = hActiveTab.UserData;
                    side_ax = findobj(hActiveTab.Children, 'Tag', 'Side');
                    b_edit = findobj(hActiveTab.Children, 'Tag', 'b_edit');
                    l_edit = findobj(hActiveTab.Children, 'Tag', 'l_edit');
                    h_edit = findobj(hActiveTab.Children, 'Tag', 'h_edit');
                    R_edit = findobj(hActiveTab.Children, 'Tag', 'R_edit');
                    b_slider = findobj(hActiveTab.Children, 'Tag', 'b_slider');
                    l_slider = findobj(hActiveTab.Children, 'Tag', 'l_slider');
                    h_slider = findobj(hActiveTab.Children, 'Tag', 'h_slider');

                    cla(side_ax);

                    b = str2double(b_edit.String);
                    l = str2double(l_edit.String);
                    h = str2double(h_edit.String);
                    R = str2double(R_edit.String);
                    b_lr = b_slider.Value;
                    l_fr = l_slider.Value;
                    h_bt = h_slider.Value;

                    b_slider.TooltipString = ['links / rechts' char(10) ...   % 10 = Zeilenumbruch
                            num2str(b*b_lr) ' / ' num2str(b*(1-b_lr)) '[m]'];
                    l_slider.TooltipString = ['vorne / hinten' char(10) ...   % 10 = Zeilenumbruch
                            num2str(l*l_fr) ' / ' num2str(l*(1-l_fr)) '[m]'];
                    h_slider.TooltipString = ['unten / oben' char(10) ...     % 10 = Zeilenumbruch
                            num2str(h*h_bt) ' / ' num2str(h*(1-h_bt)) '[m]'];

                    b_rad = .2;
                    l_sp = -l/2+l*l_fr;
                    b_sp = -b/2+b*b_lr;
                    h_sp = h*h_bt;
                    %% Side
                    line([1,1]*l/2, [-1,1]*b/2, [1,1]*R, 'Parent', side_ax, 'LineWidth', 2, 'Tag', 'Achse');
                    line([-1,-1]*l/2, [-1,1]*b/2, [1,1]*R, 'Parent', side_ax, 'LineWidth', 2, 'Tag', 'Achse');
                    line([-1,1]*l/2, [0,0]*b/2, [1,1]*R, 'Parent', side_ax, 'LineWidth', 2, 'Tag', 'Achse');
                    line([-1,1]*l/2, [1,1]*b_sp, [1,1]*R, 'Parent', side_ax, 'LineStyle', '--');
                    line([1,1]*l_sp, [1,1]*b_sp, [R,h_sp], 'Parent', side_ax, 'LineStyle', '--');

                    this.createTireAt([-l/2, b/2,R], R, b_rad, side_ax);
                    this.createTireAt([-l/2,-b/2,R], R, b_rad, side_ax);
                    this.createTireAt([ l/2,-b/2,R], R, b_rad, side_ax);
                    this.createTireAt([ l/2, b/2,R], R, b_rad, side_ax);

                    %% Schwerpunkt einzeichnen
                    [X, Y, Z] = sphere;
                    M = [l_sp, b_sp, h_sp];
                    r = .075;
                    X = X*r+M(1);
                    Y = Y*r+M(2);
                    Z = Z*r+M(3);
                    hold(side_ax, 'on');
                    mesh(X, Y, Z, 'Parent', side_ax); 
                    %rotate3d(side_ax, 'on'); % Achtung: Contextmenu nicht mehr verfuegbar!
                case 'Forces'
                    aFigSiz = hActiveTab.UserData;
                    kamm_ax = findobj(hActiveTab.Children, 'Tag', 'Kamm');
                    l_slider = findobj(hActiveTab.Children, 'Tag', 'l_slider');
                    q_slider = findobj(hActiveTab.Children, 'Tag', 'q_slider');
                    l_slider.TooltipString = ['a_l-Faktor: ' num2str(l_slider.Value)];
                    q_slider.TooltipString = ['a_q-Faktor: ' num2str(q_slider.Value)];

                    l_faktor = l_slider.Value;
                    q_faktor = q_slider.Value;
                    t = linspace(0, 2*pi);
                    g = 9.81;

                    cla(kamm_ax);
                    line(sin(t)*g,cos(t)*g, 'Parent', kamm_ax, 'color', 'r');
                    line(sin(t)*g*l_faktor, cos(t)*g*q_faktor, 'Parent', kamm_ax);
                case 'Engine & Gearbox'
                    aFigSiz = hActiveTab.UserData;
                    performance_ax = findobj(hActiveTab.Children, 'Tag', 'Performance');
                    engine_ax = findobj(hActiveTab.Children, 'Tag', 'Torque');
                    gearbox_ax = findobj(hActiveTab.Children, 'Tag', 'Gears');
                    force_ax = findobj(hActiveTab.Children, 'Tag', 'Forces');
                    n_min_edit = findobj(hActiveTab.Children, 'Tag', 'nmin');
                    n_max_edit = findobj(hActiveTab.Children, 'Tag', 'nmax');
                    ratio_tbl = findobj(hActiveTab.Children, 'Type', 'uitable');

                    cla(performance_ax);
                    cla(engine_ax);
                    cla(gearbox_ax);
                    cla(force_ax);

                    %% Getriebe
                    ratios = ratio_tbl.Data;
                    nmin = str2double(n_min_edit.String);
                    nmax = str2double(n_max_edit.String);
                    gears = size(ratios, 1)-1;
                    diff = ratios{1};
                    vmax = cell(gears, 1);
                    n = oVehicle.oEngine.torque(:, 1);
                    N = [nmin ; n(nmin<n(:) & n(:)<nmax) ; nmax];
                    t = oVehicle.oEngine.torque(:, 2);

                    %% Motorkennfeld
                    motor = struct();
                    motor.torque = interp1(n, t, N);
                    motor.performance = N.*motor.torque*2*pi;
                    line(n, t, 'Parent', engine_ax, 'Color', 'r');
                    line(n, t.*n*2*pi, 'Parent', performance_ax, 'Color', 'g');

                    V = [];
                    F = [];
                    %% Getriebe
                    getriebe = struct();
                    for i = 1:gears
                        gear = ['G' num2str(i)];
                        getriebe.(gear) = struct();
                        getriebe.(gear).Ratio = ratios{i+1};
                        getriebe.(gear).n = (N/diff/getriebe.(gear).Ratio); % AusgangsDrehzahl
                        getriebe.(gear).v = getriebe.(gear).n*2*pi*oVehicle.dims.R/60; % Geschwindigkeit
                        vmax(i+1) = {getriebe.(gear).v(end)};
                        getriebe.(gear).f = motor.torque*getriebe.(gear).Ratio*diff; % Zugkraft

                        line(getriebe.(gear).v, getriebe.(gear).f, 'Parent', force_ax);%,'Marker','d');
                        line(getriebe.(gear).v, N, 'Parent', gearbox_ax);%,'Marker','d');
                    end
                    ratio_tbl.Data(:,2) = vmax;

                    line(gearbox_ax.XLim, [nmin nmin], 'Parent', gearbox_ax, 'color', 'k', 'linestyle', '--');
                    line(gearbox_ax.XLim, [nmax nmax], 'Parent', gearbox_ax, 'color', 'k', 'linestyle', '--');
                    line([nmin nmin], engine_ax.YLim, 'Parent', engine_ax, 'color', 'k', 'linestyle', '--');
                    line([nmax nmax], engine_ax.YLim, 'Parent', engine_ax, 'color', 'k', 'linestyle', '--');
                    line([nmin nmin], performance_ax.YLim, 'Parent', performance_ax, 'color', 'k', 'linestyle', '--');
                    line([nmax nmax], performance_ax.YLim, 'Parent', performance_ax, 'color', 'k', 'linestyle', '--');
            end

            ul_corner = this.hFigure.Position(2)+this.hFigure.Position(4);
            this.hFigure.Position(2:4) = [ul_corner-aFigSiz(2) aFigSiz];
        end
        
        function updateWheelerData(this, oVehicle)
            if isempty(this)
                updateByGUI = false;
            else
                updateByGUI = true;
                hTabGroup = findobj(this.hFigure.Children, 'Type', 'uitabgroup');
            end
            %% Dims
            if updateByGUI
                TabDim = findobj(hTabGroup.Children, 'Title', 'Dimensions');
                b_edit = findobj(TabDim.Children, 'Tag', 'b_edit');
                l_edit = findobj(TabDim.Children, 'Tag', 'l_edit');
                h_edit = findobj(TabDim.Children, 'Tag', 'h_edit');
                R_edit = findobj(TabDim.Children, 'Tag', 'R_edit');
                b_slider = findobj(TabDim.Children, 'Tag', 'b_slider');
                l_slider = findobj(TabDim.Children, 'Tag', 'l_slider');
                h_slider = findobj(TabDim.Children, 'Tag', 'h_slider');

                oVehicle.dims.b = str2double(b_edit.String);
                oVehicle.dims.l = str2double(l_edit.String);
                oVehicle.dims.h = str2double(h_edit.String);
                oVehicle.dims.R = str2double(R_edit.String);
                oVehicle.dims.b_lr = b_slider.Value;
                oVehicle.dims.l_fr = l_slider.Value;
                oVehicle.dims.h_bt = h_slider.Value;
            end
            % Breite
            oVehicle.dims.bl = (oVehicle.dims.b_lr)*oVehicle.dims.b; % [m] Abstand Schwerpunkt von linker Seite
            oVehicle.dims.br = (1-oVehicle.dims.b_lr)*oVehicle.dims.b; % [m] Abstand Schwerpunkt von rechter Seite
            % Laenge
            oVehicle.dims.lf = (oVehicle.dims.l_fr)*oVehicle.dims.l; % [m] Abstand Schwerpunkt von Vorderachse
            oVehicle.dims.lr = (1-oVehicle.dims.l_fr)*oVehicle.dims.l; % [m] Abstand Schwerpunkt von Hinterachse
            % Hoehe
            oVehicle.dims.h_sp = oVehicle.dims.h*oVehicle.dims.h_bt;
            % Flaeche
            oVehicle.dims.A = oVehicle.dims.b*oVehicle.dims.h;

            %% Forces
            if updateByGUI
                TabForces = findobj(hTabGroup.Children, 'Title', 'Forces');
                l_slider = findobj(TabForces.Children, 'Tag', 'l_slider');
                q_slider = findobj(TabForces.Children, 'Tag', 'q_slider');
                cr_edit = findobj(TabForces.Children, 'Tag', 'cr_edit');
                cw_edit = findobj(TabForces.Children, 'Tag', 'cw_edit');
                m_edit = findobj(TabDim.Children, 'Tag', 'm_edit');
                oVehicle.a.l_faktor = l_slider.Value;
                oVehicle.a.q_faktor = q_slider.Value;
                oVehicle.mass = str2double(m_edit.String);
                oVehicle.oInertia.nMass = str2double(m_edit.String);
                %oVehicle.f.c_W = str2double(cw_edit.String);
                %oVehicle.f.c_R = str2double(cr_edit.String);
            end

            %% Engine & Gearbox
            if updateByGUI
                TabEngine = findobj(hTabGroup.Children, 'Title', 'Engine & Gearbox');
                n_min = findobj(TabEngine.Children, 'Tag', 'nmin');   
                n_max = findobj(TabEngine.Children, 'Tag', 'nmax');
                oVehicle.oEngine.nMin = str2double(n_min.String);
                oVehicle.oEngine.nMax = str2double(n_max.String);
                vmax_edit = findobj(TabForces.Children, 'Tag', 'vmax_edit');
                oVehicle.nVmax = str2double(vmax_edit.String);
                %oVehicle.a.lbrake = this.
                %oVehicle.a.laccl = this.
            end
        end
    end
    
    methods (Static)
        function saveSize(source, ~)
            hTabGr = findobj(source.Children, 'Type', 'UITabGroup');
            if ~isempty(hTabGr)
                hTabGr.SelectedTab.UserData = source.Position(3:4);
            end
        end
        
        function selectedGear(eventdata, ahAxes)
            % highlighting selected Gear
            for hAx = ahAxes
                ahLines = hAx.Children;
                if ~isempty(ahLines)
                    for hLine = ahLines'
                        hLine.LineWidth = 0.5;
                    end
                    if ~isempty(eventdata.Indices)
                        nIdx = eventdata.Indices(1);
                        nCount = length(ahLines);
                        if nIdx > 1
                            ahLines(nCount-nIdx+2).LineWidth = 2;
                        end
                    end
                end
            end
        end
        
        function createTireAt(M, R, B, hAX)
            n = 41;
            t = linspace(0, 2*pi, n)';
            offset = zeros(n, 1)+M(2)-B/2;
            cost = cos(t)*R;
            sint = sin(t)*R;
            scales = [.75 0;
                      .9  0;
                      .95 .025;
                      1   .1;
                      1   .5;
                      1   .9;
                      .95 .975;
                      .75 1];
            nn = size(scales, 1);      
            xpoints = repmat([], n, nn);
            ypoints = repmat([], n, nn);
            zpoints = repmat([], n, nn);
            for i = 1:nn
                xpoints(:,i) = cost*scales(i, 1)+M(1);
                ypoints(:,i) = offset+B*scales(i, 2);
                zpoints(:,i) = sint*scales(i, 1)+M(3);
                line( ...
                      xpoints(:, i) ...
                    , ypoints(:, i) ...
                    , zpoints(:, i) ...
                    , 'Parent', hAX ...
                    , 'Tag', 'Tyre' ...
                    , 'color', 'k' ...
                    );    
            end
            for i = 1:n
                line( ...
                      xpoints(i, :) ...
                    , ypoints(i, :) ...
                    , zpoints(i, :) ...
                    , 'Parent', hAX ...
                    , 'Tag', 'Tyre' ...
                    , 'color', 'k' ...
                    );
            end
        end
    end
    
end

