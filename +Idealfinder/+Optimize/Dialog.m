classdef Dialog
    properties
        hFigure
        hTabGr
        hHorizonTab
        hParamTab
        
        hUiSlStart
        hUiPbToggleStart
        hUiSlQuer1
        hUiSlQuer2
        hUiSlOrient
        hUiSlVelo
        hUiSlZiel
        hUiCbVeloOutput
    end
    
    methods
        function [this] = Dialog(oCourse)
            b = .15;
            h = .4;
            n = size(oCourse.XYZ, 1);
            
            %% Initialisierung
            start_line = findobj('Tag', 'optim_preview:start');
            try
                start = start_line.UserData;
                %quer_sl1 = getPosition(Coords,)
            catch
                start = 1;
                quer_sl1 = -1;
                quer_sl2 =  1;
            end
            
            ziel_line = findobj('Tag', 'optim_preview:ziel');
            try
                ziel = ziel_line.UserData;
            catch
                ziel = n;
            end
            orient = 0;
            v = 10;

            %% GUI erzeugen
            H = 1;
            zeilen = 12;

            this.hFigure = figure('Units', 'normal' ...
                    , 'name', 'Optimierung' ...
                    , 'NumberTitle', 'off' ...
                    , 'Position', [(1-b)/2+.3 (1-h)/2 b h] ...
                    , 'MenuBar', 'none' ...
                    , 'ToolBar', 'none' ...
                    );
            hh = .1;
            uicontrol(this.hFigure ...
                    , 'Style', 'pushbutton' ...
                    , 'String', 'Start' ...
                    , 'Units', 'normal' ...
                    , 'Position', [0 0 1 hh] ...
                    , 'Callback', @(~,~) this.PrepareOptimization() ...
                    );

            this.hTabGr = uitabgroup(this.hFigure, 'Units', 'normal', 'Position', [0 hh 1 1-hh]);
            this.hHorizonTab = uitab(this.hTabGr, 'Title', 'Horizont');
            this.hParamTab = uitab(this.hTabGr, 'Title', 'Parameter');

            %% Horizont-Tab
            h = 1/zeilen;
            H = H-h;
            uicontrol(this.hHorizonTab ...
                , 'Style', 'text' ...
                , 'String', 'Startposition' ...
                , 'FontUnits', 'normalized' ...
                , 'FontSize', 1 ...
                , 'Units', 'normalized' ...
                , 'Position', [0 H 1 h] ...
                );
            H = H-h;
            this.hUiSlStart = uicontrol(this.hHorizonTab ...
                    , 'Style','slider' ...
                    , 'Min', 1 ...
                    , 'Max', n ...
                    , 'Value', start ...
                    , 'SliderStep', [1/(n-1) 10/(n-1)] ...
                    , 'Tag', 'start_sl' ...
                    , 'TooltipString', sprintf('Startpunkt: %d', start) ...
                    , 'Units', 'normal' ...
                    , 'Position', [0 H 1 h] ...
                    , 'Callback', @(src,~) this.preview(src, oCourse) ...
                    );
            H = H-h;
            this.hUiPbToggleStart = uicontrol(this.hHorizonTab ...
                    , 'Style', 'pushbutton' ...
                    , 'Tag', 'toggle_start' ...
                    , 'String', 'Startbereich' ...
                    , 'FontUnits', 'normal' ...
                    , 'FontSize', 1 ...
                    , 'Units', 'normal' ...
                    , 'Position', [0 H 1 h] ...
                    , 'UserData', false ...
                    , 'Callback', @(~,~) Idealfinder.Optimize.toggle_optim_quer(this) ...
                    );
            H = H-h;
            this.hUiSlQuer1 = uicontrol(this.hHorizonTab ...
                    , 'Style', 'slider' ...
                    , 'Min', -1 ...
                    , 'Max', 1 ...
                    , 'Value', -1 ...
                    , 'Tag', 'quer_sl1' ...
                    , 'TooltipString', sprintf('Quer: %d', -1) ...
                    , 'Units', 'normal' ...
                    , 'Position', [0 H 1 h] ...
                    , 'Callback', @(src,~) this.preview(src, oCourse) ...
                    );
            H = H-h;
            this.hUiSlQuer2 = uicontrol(this.hHorizonTab ...
                    , 'Style', 'slider' ...
                    , 'Min', -1 ...
                    , 'Max', 1 ...
                    , 'Value', 1 ...
                    , 'Tag', 'quer_sl2' ...
                    , 'TooltipString', sprintf('Quer: %d', 1) ...
                    , 'Units', 'normal' ...
                    , 'Position', [0 H 1 h] ...
                    , 'Callback', @(src,~) this.preview(src, oCourse) ...
                    );
            H = H-h;
            uicontrol(this.hHorizonTab ...
                    , 'Style', 'text' ...
                    , 'String', 'Orientierung' ...
                    , 'FontUnits', 'normal' ...
                    , 'FontSize', 1 ...
                    , 'Units', 'normal' ...
                    , 'Position', [0 H 1 h] ...
                    );
            H = H-h;
            this.hUiSlOrient = uicontrol(this.hHorizonTab ...
                    , 'Style', 'slider' ...
                    , 'Min', -90 ...
                    , 'Max', 90 ...
                    , 'Value', orient ...
                    , 'Tag', 'orient_sl' ...
                    , 'TooltipString', sprintf('Orientierung: %d', orient) ...
                    , 'Units', 'normal' ...
                    , 'Position', [0 H 1 h] ...
                    , 'Callback', @(src,~) this.preview(src, oCourse) ...
                    );
            H = H-h;
            uicontrol(this.hHorizonTab ...
                    , 'Style', 'text' ...
                    , 'String', 'Geschwindigkeit' ...
                    , 'FontUnits', 'normal' ...
                    , 'FontSize', 1 ...
                    , 'Units', 'normal' ...
                    , 'Position', [0 H 1 h] ...
                    );
            H = H-h;
            this.hUiSlVelo = uicontrol(this.hHorizonTab ...
                    , 'Style', 'slider' ...
                    , 'Min', 0 ...
                    , 'Max', 100 ...
                    , 'Value', v ...
                    , 'Tag', 'v_sl' ...
                    , 'TooltipString', sprintf('Geschwindigkeit: %d', v) ...
                    , 'Units','normal' ...
                    , 'Position', [0 H 1 h] ...
                    , 'Callback', @(src,~) this.preview(src, oCourse) ...
                    );
            H = H-h;
            uicontrol(this.hHorizonTab ...
                    , 'Style', 'text' ...
                    , 'String', 'Zielposition' ...
                    , 'FontUnits', 'normal' ...
                    , 'FontSize', 1 ...
                    , 'Units', 'normal' ...
                    , 'Position', [0 H 1 h] ...
                    );
            H = H-h;
            this.hUiSlZiel = uicontrol(this.hHorizonTab ...
                    , 'Style','slider' ...
                    , 'Min', 1 ...
                    , 'Max', n ...
                    , 'Value', ziel ...
                    , 'SliderStep', [1/(n-1) 10/(n-1)] ...
                    , 'Tag', 'ziel_sl' ...
                    , 'TooltipString', sprintf('Zielpunkt: %d', ziel) ...
                    , 'Units', 'normal' ...
                    , 'Position', [0 H 1 h] ...
                    , 'Callback', @(src,~) this.preview(src, oCourse) ...
                    );
            H = H-h;
            this.hUiCbVeloOutput = uicontrol(this.hHorizonTab ...
                    , 'Style', 'checkbox' ...
                    , 'String', 'Geschwindigkeitsvektoren' ...
                    , 'Tag', 'v_output' ...
                    , 'Units', 'normal' ...
                    , 'Position', [0 H 1 h] ...
                    , 'Value', 1 ...
                    );

            %% Parameter-Tab
            H = 1;
            asParams = struct;%('strText', {}, 'strTag', {}, nValue, []);
            asParams.strText = 'Smin';
            asParams(end).strTag = 'optim:wS';
            asParams(end).nValue = 1;
            asParams(end+1).strText = 'Tmin';
            asParams(end).strTag = 'optim:wT';
            asParams(end).nValue = 0;
            asParams(end+1).strText = 'Vmax';
            asParams(end).strTag = 'optim:wV';
            asParams(end).nValue = 0;
            asParams(end+1).strText = 'Kmin';
            asParams(end).strTag = 'optim:wK';
            asParams(end).nValue = 0;
            asParams(end+1).strText = 'a_qmin';
            asParams(end).strTag = 'optim:a_qmin';
            asParams(end).nValue = 0;
            asParams(end+1).strText = 'dVmin';
            asParams(end).strTag = 'optim:w_dV';
            asParams(end).nValue = 0;
                 
            zeilen = 2*numel(asParams);
            h = 1/zeilen;
            for sParam = asParams
                H = H-h;
                uicontrol(this.hParamTab ...
                    , 'Style', 'text' ...
                    , 'String', sParam.strText ...
                    ..., 'FontUnits', 'normal' ...
                    ..., 'FontSize', 1 ...
                    , 'Units', 'normal' ...
                    , 'Position', [0 H 1 h] ...
                    );
                H = H-h;
                uicontrol(this.hParamTab ...
                    , 'Style', 'edit' ...
                    , 'String', num2str(sParam.nValue) ...
                    , 'Tag', sParam.strTag ...
                    , 'TooltipString', sprintf('Wichtungsfaktor %s', sParam.strText) ...
                    , 'Units', 'normal' ...
                    , 'Position', [0 H 1 h] ...
                    );    
            end

            %% start_line & ziel_line
            source.Tag = 'init';
            this.preview(source, oCourse);
        end
        
        function PrepareOptimization(this)
            Idealfinder.Optimize.optimSetting();
            %close(this.hFigure);
        end
        
        function preview(this, source, oCourse)
            update_startline = false;
            update_zielline = false;
            hMainAxes = findobj('Tag', 'Hauptachse');

            n = length(oCourse.XYZ);
            S.Vertices = zeros(n*2, 3);
            S.Vertices(1:n,:) = [oCourse.leftBorder , oCourse.XYZ(:, 3)];
            S.Vertices(n+1:2*n,:) = [oCourse.rightBorder , oCourse.XYZ(:, 3)];

            switch source.Tag
                case 'init'
                    update_startline = true;
                    update_zielline = true;
                case 'start_sl'
                    update_startline = true;
                    ziel_sl = findobj('Tag', 'ziel_sl');
                    if source.Value > ziel_sl.Value
                        ziel_sl.Value = source.Value;
                        update_zielline = true;
                    end
                case 'quer_sl1'
                    update_startline = true;
                case 'quer_sl2'
                    update_startline = true;
                case 'orient_sl'
                    orient_sl = findobj('Tag', source.Tag);
                    orient_sl.TooltipString = sprintf('Orientierung: %d', orient_sl.Value);
                case 'v_sl'
                    v_sl = findobj('Tag',source.Tag);
                    v_sl.TooltipString = sprintf('Geschwindigkeit: %d', v_sl.Value);
                case 'ziel_sl'
                    update_zielline = true;
                    start_sl = findobj('Tag', 'start_sl');
                    if source.Value < start_sl.Value
                        start_sl.Value = source.Value;
                        update_startline = true;
                    end
            end

            if update_startline
                tag = {'optim_preview:startpatch', 'optim_preview:start'};
                start_sl = findobj('Tag', 'start_sl'); % slider
                von = round(start_sl.Value);
                quer_sl1 = findobj('Tag', 'quer_sl1'); % slider
                quer_sl1.TooltipString = sprintf('Startpunkt: %d', quer_sl1.Value);
                quer_sl2 = findobj('Tag','quer_sl2'); % slider
                quer_sl2.TooltipString = sprintf('Startpunkt: %d', quer_sl2.Value);
                start_sl.TooltipString = sprintf('Startpunkt: %d' ,von);
                X = oCourse.XYZ(von, 1);
                Y = oCourse.XYZ(von, 2);
                Z = ones(1,2)*oCourse.XYZ(von, 3);
                B = oCourse.B(von);

                startX = [oCourse.MP_v(von,1)*quer_sl1.Value , oCourse.MP_v(von,1)*quer_sl2.Value]*B/2+X;
                startY = [oCourse.MP_v(von,2)*quer_sl1.Value , oCourse.MP_v(von,2)*quer_sl2.Value]*B/2+Y;

                %% Patch
                delete(findobj('Type', 'Patch', 'Tag', tag{1}));
                S.Faces = zeros(von-1, 4);
                for i = 1:von-1
                    S.Faces(i,:) = [i, i+1, n+i+1, n+i];
                end
                patch('Faces', S.Faces ...
                      , 'Vertices', S.Vertices ...
                      , 'FaceColor', 'black' ...
                      , 'FaceAlpha', 0.3 ...
                      , 'Parent', hMainAxes ...
                      , 'Tag', tag{1} ...
                      );
                %% Patchende

                start_line = findobj('Tag', tag{2});
                if ~isempty(start_line)
                    start_line.XData = startX;
                    start_line.YData = startY;
                    start_line.ZData = Z;
                else
                    start_line = line(startX, startY, Z ...
                                      , 'Tag', tag{2} ...
                                      , 'color', 'green' ...
                                      , 'LineWidth', 2 ...
                                      , 'Parent', hMainAxes ...
                                      );
                end
                start_line.UserData = von;
            end

            if update_zielline
                tag = {'optim_preview:zielpatch', 'optim_preview:ziel'};
                ziel_sl = findobj('Tag', 'ziel_sl'); % slider
                bis = round(ziel_sl.Value);
                ziel_sl.TooltipString = sprintf('Zielpunkt: %d', bis);
                X = oCourse.XYZ(bis, 1);
                Y = oCourse.XYZ(bis, 2);
                Z = ones(1,2)*oCourse.XYZ(bis, 3);
                B = oCourse.B(bis);

                zielX = [oCourse.MP_v(bis, 1), -oCourse.MP_v(bis,1)]*B/2+X;
                zielY = [oCourse.MP_v(bis, 2), -oCourse.MP_v(bis,2)]*B/2+Y;

                %% Patch
                delete(findobj('Type', 'Patch', 'Tag', tag{1}));
                S.Faces = zeros((n-bis)-1, 4);
                for i = bis:n-1
                    j = i-bis+1;
                    S.Faces(j,:) = [i, i+1, n+i+1, n+i];
                end
                patch('Faces', S.Faces ...
                      , 'Vertices', S.Vertices ...
                      , 'FaceColor', 'black' ...
                      , 'FaceAlpha', 0.3 ...
                      , 'Parent', hMainAxes ...
                      , 'Tag', tag{1} ...
                      );
                %% Patchende

                ziel_line = findobj('Tag', tag{2});
                if ~isempty(ziel_line)
                    ziel_line.XData = zielX;
                    ziel_line.YData = zielY;
                    ziel_line.ZData = Z;
                else
                    ziel_line = line(zielX, zielY, Z ...
                                     , 'Tag', tag{2} ...
                                     , 'color', 'red' ...
                                     , 'LineWidth', 2 ...
                                     , 'Parent', hMainAxes ...
                                     );
                end
                ziel_line.UserData = bis;
            end
        end
    end
end